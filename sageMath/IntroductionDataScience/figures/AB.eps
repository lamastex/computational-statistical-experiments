%!PS-Adobe-3.0 EPSF-3.0
%%Title: (AB.pdf)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 13:05:27 08/26/10
%%For: (Sha Zhu)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 842 595
%%HiResBoundingBox: 0.0 0.0 842.0 595.0
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Printer/PostScript Color Management 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
/T0AddT42Mtx2
{
	/CIDFont findresource /Metrics2 get begin def end
}bind def
end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 3263 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/">
         <xap:CreateDate>2010-08-26T13:05:27+12:00</xap:CreateDate>
         <xap:ModifyDate>2010-08-26T13:05:27+12:00</xap:ModifyDate>
         <xap:MetadataDate>2010-08-26T13:05:27+12:00</xap:MetadataDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:6E426103AEB0DF119D59CB5D022E47F2</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:6E426103AEB0DF119D59CB5D022E47F2</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Sha Zhu</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 842.0 595.0 rectclip
q
0.0 0.0 m
842.0 0.0 l
842.0 595.0 l
0.0 595.0 l
h
W
n
0.1 w
q
n
0.0 -0.3 842.0 595.3 re
eoclip
n
q
2.83 w
1 j
n
418.1 56.4 m
56.7 56.4 l
56.7 538.3 l
779.5 538.3 l
779.5 56.4 l
418.1 56.4 l
h
[/DeviceRGB] cs 0.0 0.0 0.0 sc
S
Q
q
[/DeviceRGB] cs 0.0 0.0 0.0 sc
%ADOBeginSubsetFont: WKFBAA+ArialMT Initial
ct_T42Dict begin
0 0 0.699 0.727
 256 array 0 1 255 {1 index exch /.notdef put} for  /WKFBAA+ArialMT
Type42DictBegin
[<00010000000b000b000b000b6376742095dc74da000000bc000006306670
676d57a22a11000006ec000005b0676c79665ef82928000044080000040e
68656164e843ab0d00000c9c000000366868656153fe820700000cd40000
0024686d7478f501a71500000cf8000000106c6f6361ba01ed0200000d08
0000000a6d6178705b0a690400000d14000000206e616d6550c7cd890000
0d3400002bd1707265709d799e1a0000390800000afd6764697200000000
000000000000000005ba001905ba001a05a70019042600180000ffe70000
ffe80000ffe7fe69ffe805ba0019fe69ffe802ea000000b8000000b80000
000000a800ad016900ad00bf00c201f0001800af00b900b400c800170044
009c007c009400870006005a00c80089005200520005004400940119ffb4
002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c
006e00700180ff58ff8eff92ffa400a500b903c8fffd000b001a00630063
00cdffee05d8ffdc002d005c0095009900df019209b500400057008000b9
039d0072009a035d0401ff67fffa00030021007700cd0004004d00cd01c0
022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068
009a00ba013501470221055cff4dffcd0016002d00780080009900b200b6
00b600b800bd00da010c05f0ffa4fff00019002c0049007f00b400ce01c0
03fefd81fe3f000000050018002900390049006f00be00c700d0012301c1
026f050c05320540057affd4001400310055005700a700b400e601f7027e
027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f
01560229026f029e03720008002c00310031006400690089009800c700de
012b01b6020c02cf03a304ab04fb061dfee0ff0e00060026009b009d00c1
010d011801200173018201d601e30243025f029b02e2039404a904d20761
001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd04420442045304730483
0586058b06e8fe58fec4fed1fef7ff32ff860051007c008100910095009e
00b400b900cf00d900d900df00e20105010b010e010e012001210155017b
017b017e018d01a201a801a901b401d001d001e201e901f201f501fb0200
02000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a
04cf04ff053205320596059f05a805ab05c205f0060c0782080008ccfca3
fd2afddefe00fe88fe96feb2feb4ffe100150019001a001c001f003c0051
00610061006a0078009600a500af00d3010c0118011a012a013e014c0151
015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef
0200020d021c02210222022e02350242024f024f025e0265027102900292
02b402d602fa0307030b030f0315032a0347035d036503740379039603b0
03cc03dd03e203f603fc03fc03ff040a041f04220426042b0447045f0475
049e04e704e7055c05cb05e5060a066d068606b806f10736073e07500751
075d078f07b607d4086000b600c300b500b7000000000000000000000000
01e00381034503b5008e0233041902ce02ce002d005f0064034d023f0000
02a80188027d01b402240578063b023b014e00f00426029402c6029f02f6
023b034d014b0153006a0231000000000000061404aa0000003c04c300ed
04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e
05580021039c00ae0371017d00b5024500000afb088c012b014e01aa0087
0054013201f803ff0003024e00b4003703e30083006b02d800ed00770088
009701640467008e0033017c00e700a6029e0329056e062a061501c90269
048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d0086
0071ff810079055804d2016700030156002504e00094007c033204210094
007f0072005c002f00b6001800ba00b80041034d00720018001f004c016a
01550099009a009a009800b200040078006900140057006e00ce00b40654
02b80067050e016500e7000004cbfe52005affa60099ff67006eff92002d
ffd40087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c
054602cf0546ff2d028a02d90253029600b7000000000000000000000000
00000125011800ea00ea00ae0046003e05bb008a04d70053003fff8cffd5
00150028002200990062004a00e4006d00ee00e5004803c00033fe4e02b1
ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061
072b404141403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8022323701020b802234520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b807085158b00425b0
0425012046b01060482046b0106048590a21211b2121592d2cb012435c58
0cb00425b00425060c6423646164b807085158b00425b00425012046b8ff
f060482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b
1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012
435c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c
5a58381b2121592d2c4b5258b00425b0042549b00425b00425496120b000
5458212043b0005558b00325b00325b8ffc038b8ffc038591bb040545820
43b0005458b00225b8ffc038591b2043b0005458b00325b00325b8ffc038
b8ffc0381bb00325b8ffc03859595959212121212d2c462346608a8a4623
20468a608a61b8ff8062232010238ab902c202c28a70456020b0005058b0
0161b8ffba8b1bb0468c59b0106068013a2d000100000002d1ec2f4c8748
5f0f3cf5081b080000000000a2e3272a0000000000000000fffd0000059b
05d300000009000100000000000000010000073efe4e0043000000000000
0000000100000000000000000000000000000004060001000556fffd05fb
0061055600960000003600e6018402070000000100000004002b00030000
000000020010002f00420000040c0afd0003000200000046034e00000003
0000000000fe00000000000300000001000a00fe0000000300000002000e
01080000000300000003005e01160000000300000004000a017400000003
000000050018017e0000000300000006000e0196000000030000000700c4
01a40000000300000008002602680000000300000009008a028e00000003
0000000a04c20318000000030000000b006207da000000030000000c0066
083c000000030000000d06b408a2000000030000000e005c0f5600010000
00000000007f0fb200010000000000010005103100010000000000020007
10360001000000000003002f103d00010000000000040005106c00010000
00000005000c107100010000000000060007107d00010000000000070062
10840001000000000008001310e60001000000000009004510f900010000
0000000a0261113e000100000000000b0031139f000100000000000c0033
13d0000100000000000d035a1403000100000000000e002e175d00030001
04030002000c178b0003000104050002001017970003000104060002000c
17a70003000104070002001017b30003000104080002001017c300030001
0409000000fe17d30003000104090001000a18d10003000104090002000e
18db0003000104090003005e18e90003000104090004000a194700030001
04090005001819510003000104090006000e1969000300010409000700c4
1977000300010409000800261a3b0003000104090009008a1a6100030001
0409000a04c21aeb000300010409000b00621fad000300010409000c0066
200f000300010409000d06b42075000300010409000e005c272900030001
040a0002000c278500030001040b00020010279100030001040c0002000c
27a100030001040e0002000c27ad0003000104100002000e27b900030001
04130002001227c70003000104140002000c27d900030001041500020010
27e50003000104160002000c27f50003000104190002000e280100030001
041b00020010280f00030001041d0002000c281f00030001041f0002000c
282b0003000104240002000e283700030001042a0002000e284500030001
042d00020000285300030001080a0002000c28530003000108160002000c
285f000300010c0a0002000c286b000300010c0c0002000c287700540079
007000650066006100630065002000a900200054006800650020004d006f
006e006f007400790070006500200043006f00720070006f007200610074
0069006f006e00200070006c0063002e00200044006100740061002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002f
005400790070006500200053006f006c007500740069006f006e00730020
0049006e0063002e00200031003900390030002d0031003900390032002e
00200041006c006c00200052006900670068007400730020005200650073
006500720076006500640041007200690061006c0052006500670075006c
00610072004d006f006e006f0074007900700065003a0041007200690061
006c00200052006500670075006c00610072003a00560065007200730069
006f006e00200032002e0038003200200028004d006900630072006f0073
006f0066007400290041007200690061006c00560065007200730069006f
006e00200032002e003800320041007200690061006c004d005400410072
00690061006c00ae002000540072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e00200070006c
00630020007200650067006900730074006500720065006400200069006e
002000740068006500200055005300200050006100740020002600200054
004d0020004f00660066002e00200061006e006400200065006c00730065
00770068006500720065002e004d006f006e006f00740079007000650020
005400790070006f006700720061007000680079004d006f006e006f0074
00790070006500200054007900700065002000440072006100770069006e
00670020004f006600660069006300650020002d00200052006f00620069
006e0020004e006900630068006f006c00610073002c0020005000610074
007200690063006900610020005300610075006e00640065007200730020
00310039003800320043006f006e00740065006d0070006f007200610072
0079002000730061006e0073002000730065007200690066002000640065
007300690067006e002c00200041007200690061006c00200063006f006e
007400610069006e00730020006d006f00720065002000680075006d0061
006e00690073007400200063006800610072006100630074006500720069
007300740069006300730020007400680061006e0020006d0061006e0079
0020006f0066002000690074007300200070007200650064006500630065
00730073006f0072007300200061006e0064002000610073002000730075
006300680020006900730020006d006f0072006500200069006e00200074
0075006e00650020007700690074006800200074006800650020006d006f
006f00640020006f006600200074006800650020006c0061007300740020
00640065006300610064006500730020006f006600200074006800650020
007400770065006e00740069006500740068002000630065006e00740075
00720079002e002000200054006800650020006f0076006500720061006c
006c002000740072006500610074006d0065006e00740020006f00660020
00630075007200760065007300200069007300200073006f006600740065
007200200061006e0064002000660075006c006c00650072002000740068
0061006e00200069006e0020006d006f0073007400200069006e00640075
00730074007200690061006c0020007300740079006c0065002000730061
006e0073002000730065007200690066002000660061006300650073002e
00200020005400650072006d0069006e0061006c0020007300740072006f
006b00650073002000610072006500200063007500740020006f006e0020
00740068006500200064006900610067006f006e0061006c002000770068
006900630068002000680065006c0070007300200074006f002000670069
00760065002000740068006500200066006100630065002000610020006c
0065007300730020006d0065006300680061006e006900630061006c0020
0061007000700065006100720061006e00630065002e0020002000410072
00690061006c00200069007300200061006e002000650078007400720065
006d0065006c007900200076006500720073006100740069006c00650020
00660061006d0069006c00790020006f0066002000740079007000650066
0061006300650073002000770068006900630068002000630061006e0020
006200650020007500730065006400200077006900740068002000650071
00750061006c0020007300750063006300650073007300200066006f0072
00200074006500780074002000730065007400740069006e006700200069
006e0020007200650070006f007200740073002c00200070007200650073
0065006e0074006100740069006f006e0073002c0020006d006100670061
007a0069006e006500730020006500740063002c00200061006e00640020
0066006f007200200064006900730070006c006100790020007500730065
00200069006e0020006e006500770073007000610070006500720073002c
0020006100640076006500720074006900730069006e006700200061006e
0064002000700072006f006d006f00740069006f006e0073002e00680074
00740070003a002f002f007700770077002e006d006f006e006f00740079
00700065002e0063006f006d002f00680074006d006c002f006d0074006e
0061006d0065002f006d0073005f0061007200690061006c002e00680074
006d006c0068007400740070003a002f002f007700770077002e006d006f
006e006f0074007900700065002e0063006f006d002f00680074006d006c
002f006d0074006e0061006d0065002f006d0073005f00770065006c0063
006f006d0065002e00680074006d006c004e004f00540049004600490043
004100540049004f004e0020004f00460020004c004900430045004e0053
0045002000410047005200450045004d0045004e0054000d000a000d000a
005400680069007300200074007900700065006600610063006500200069
00730020007400680065002000700072006f007000650072007400790020
006f00660020004d006f006e006f00740079007000650020005400790070
006f00670072006100700068007900200061006e00640020006900740073
002000750073006500200062007900200079006f00750020006900730020
0063006f0076006500720065006400200075006e00640065007200200074
006800650020007400650072006d00730020006f0066002000610020006c
006900630065006e00730065002000610067007200650065006d0065006e
0074002e00200059006f0075002000680061007600650020006f00620074
00610069006e006500640020007400680069007300200074007900700065
006600610063006500200073006f00660074007700610072006500200065
006900740068006500720020006400690072006500630074006c00790020
00660072006f006d0020004d006f006e006f00740079007000650020006f
007200200074006f00670065007400680065007200200077006900740068
00200073006f006600740077006100720065002000640069007300740072
0069006200750074006500640020006200790020006f006e00650020006f
00660020004d006f006e006f0074007900700065002700730020006c0069
00630065006e0073006500650073002e000d000a000d000a005400680069
007300200073006f00660074007700610072006500200069007300200061
002000760061006c007500610062006c0065002000610073007300650074
0020006f00660020004d006f006e006f0074007900700065002e00200055
006e006c00650073007300200079006f0075002000680061007600650020
0065006e0074006500720065006400200069006e0074006f002000610020
007300700065006300690066006900630020006c006900630065006e0073
0065002000610067007200650065006d0065006e00740020006700720061
006e00740069006e006700200079006f0075002000610064006400690074
0069006f006e0061006c0020007200690067006800740073002c00200079
006f0075007200200075007300650020006f006600200074006800690073
00200073006f0066007400770061007200650020006900730020006c0069
006d006900740065006400200074006f00200079006f0075007200200077
006f0072006b00730074006100740069006f006e00200066006f00720020
0079006f007500720020006f0077006e0020007000750062006c00690073
00680069006e00670020007500730065002e00200059006f00750020006d
006100790020006e006f007400200063006f007000790020006f00720020
006400690073007400720069006200750074006500200074006800690073
00200073006f006600740077006100720065002e000d000a000d000a0049
006600200079006f00750020006800610076006500200061006e00790020
007100750065007300740069006f006e00200063006f006e006300650072
006e0069006e006700200079006f00750072002000720069006700680074
007300200079006f0075002000730068006f0075006c0064002000720065
007600690065007700200074006800650020006c006900630065006e0073
0065002000610067007200650065006d0065006e007400200079006f0075
002000720065006300650069007600650064002000770069007400680020
00740068006500200073006f0066007400770061007200650020006f0072
00200063006f006e00740061006300740020004d006f006e006f00740079
0070006500200066006f00720020006100200063006f007000790020006f
006600200074006800650020006c006900630065006e0073006500200061
0067007200650065006d0065006e0074002e000d000a000d000a004d006f
006e006f0074007900700065002000630061006e00200062006500200063
006f006e007400610063007400650064002000610074003a000d000a000d
000a0055005300410020002d002000280038003400370029002000370031
0038002d0030003400300030000900090055004b0020002d002000300031
003100340034002000300031003700330037002000370036003500390035
0039000d000a0068007400740070003a002f002f007700770077002e006d
006f006e006f0074007900700065002e0063006f006d0068007400740070
003a002f002f007700770077002e006d006f006e006f0074007900700065
002e0063006f006d002f00680074006d006c002f0074007900700065002f
006c006900630065006e00730065002e00680074006d006c547970656661
636520a920546865204d6f6e6f7479706520436f72706f726174696f6e20
706c632e204461746120a920546865204d6f6e6f7479706520436f72706f
726174696f6e20706c632f5479706520536f6c7574696f6e7320496e632e
20313939302d313939322e20416c6c205269676874732052657365727665
64417269616c526567756c61724d6f6e6f747970653a417269616c205265
67756c61723a56657273696f6e20322e383220284d6963726f736f667429
417269616c56657273696f6e20322e3832417269616c4d54417269616ca8
2054726164656d61726b206f6620546865204d6f6e6f7479706520436f72
706f726174696f6e20706c63207265676973746572656420696e20746865
20555320506174202620544d204f66662e20616e6420656c736577686572
652e4d6f6e6f74797065205479706f6772617068794d6f6e6f7479706520
547970652044726177696e67204f6666696365202d20526f62696e204e69
63686f6c61732c205061747269636961205361756e646572732031393832
436f6e74656d706f726172792073616e732073657269662064657369676e
2c20417269616c20636f6e7461696e73206d6f72652068756d616e697374
20636861726163746572697374696373207468616e206d616e79206f6620
697473207072656465636573736f727320616e6420617320737563682069
73206d6f726520696e2074756e65207769746820746865206d6f6f64206f
6620746865206c6173742064656361646573206f6620746865207477656e
74696574682063656e747572792e2020546865206f766572616c6c207472
6561746d656e74206f662063757276657320697320736f6674657220616e
642066756c6c6572207468616e20696e206d6f737420696e647573747269
616c207374796c652073616e732073657269662066616365732e20205465
726d696e616c207374726f6b65732061726520637574206f6e2074686520
646961676f6e616c2077686963682068656c707320746f20676976652074
686520666163652061206c657373206d656368616e6963616c2061707065
6172616e63652e2020417269616c20697320616e2065787472656d656c79
20766572736174696c652066616d696c79206f6620747970656661636573
2077686963682063616e2062652075736564207769746820657175616c20
7375636365737320666f7220746578742073657474696e6720696e207265
706f7274732c2070726573656e746174696f6e732c206d6167617a696e65
73206574632c20616e6420666f7220646973706c61792075736520696e20
6e6577737061706572732c206164766572746973696e6720616e64207072
6f6d6f74696f6e732e687474703a2f2f7777772e6d6f6e6f747970652e63
6f6d2f68746d6c2f6d746e616d652f6d735f617269616c2e68746d6c6874
74703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e
616d652f6d735f77656c636f6d652e68746d6c4e4f54494649434154494f
4e204f46204c4943454e53452041475245454d454e540d0a0d0a54686973
207479706566616365206973207468652070726f7065727479206f66204d
6f6e6f74797065205479706f67726170687920616e642069747320757365
20627920796f7520697320636f766572656420756e646572207468652074
65726d73206f662061206c6963656e73652061677265656d656e742e2059
6f752068617665206f627461696e65642074686973207479706566616365
20736f66747761726520656974686572206469726563746c792066726f6d
204d6f6e6f74797065206f7220746f676574686572207769746820736f66
7477617265206469737472696275746564206279206f6e65206f66204d6f
6e6f747970652773206c6963656e736565732e0d0a0d0a5468697320736f
66747761726520697320612076616c7561626c65206173736574206f6620
4d6f6e6f747970652e20556e6c65737320796f75206861766520656e7465
72656420696e746f2061207370656369666963206c6963656e7365206167
7265656d656e74206772616e74696e6720796f75206164646974696f6e61
6c207269676874732c20796f757220757365206f66207468697320736f66
7477617265206973206c696d6974656420746f20796f757220776f726b73
746174696f6e20666f7220796f7572206f776e207075626c697368696e67
207573652e20596f75206d6179206e6f7420636f7079206f722064697374
726962757465207468697320736f6674776172652e0d0a0d0a496620796f
75206861766520616e79207175657374696f6e20636f6e6365726e696e67
20796f75722072696768747320796f752073686f756c6420726576696577
20746865206c6963656e73652061677265656d656e7420796f7520726563
656976656420776974682074686520736f667477617265206f7220636f6e
74616374204d6f6e6f7479706520666f72206120636f7079206f66207468
65206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e6f7479
70652063616e20626520636f6e7461637465642061743a0d0a0d0a555341
202d202838343729203731382d303430300909554b202d20303131343420
3031373337203736353935390d0a687474703a2f2f7777772e6d6f6e6f74
7970652e636f6d687474703a2f2f7777772e6d6f6e6f747970652e636f6d
2f68746d6c2f747970652f6c6963656e73652e68746d6c004e006f007200
6d0061006c006f00620079010d0065006a006e00e9006e006f0072006d00
61006c005300740061006e0064006100720064039a03b103bd03bf03bd03
b903ba03ac00540079007000650066006100630065002000a90020005400
6800650020004d006f006e006f007400790070006500200043006f007200
70006f0072006100740069006f006e00200070006c0063002e0020004400
6100740061002000a900200054006800650020004d006f006e006f007400
790070006500200043006f00720070006f0072006100740069006f006e00
200070006c0063002f005400790070006500200053006f006c0075007400
69006f006e007300200049006e0063002e00200031003900390030002d00
31003900390032002e00200041006c006c00200052006900670068007400
730020005200650073006500720076006500640041007200690061006c00
52006500670075006c00610072004d006f006e006f007400790070006500
3a0041007200690061006c00200052006500670075006c00610072003a00
560065007200730069006f006e00200032002e0038003200200028004d00
6900630072006f0073006f0066007400290041007200690061006c005600
65007200730069006f006e00200032002e00380032004100720069006100
6c004d00540041007200690061006c00ae00200054007200610064006500
6d00610072006b0020006f006600200054006800650020004d006f006e00
6f007400790070006500200043006f00720070006f007200610074006900
6f006e00200070006c006300200072006500670069007300740065007200
65006400200069006e002000740068006500200055005300200050006100
740020002600200054004d0020004f00660066002e00200061006e006400
200065006c0073006500770068006500720065002e004d006f006e006f00
740079007000650020005400790070006f00670072006100700068007900
4d006f006e006f0074007900700065002000540079007000650020004400
72006100770069006e00670020004f006600660069006300650020002d00
200052006f00620069006e0020004e006900630068006f006c0061007300
2c0020005000610074007200690063006900610020005300610075006e00
64006500720073002000310039003800320043006f006e00740065006d00
70006f0072006100720079002000730061006e0073002000730065007200
690066002000640065007300690067006e002c0020004100720069006100
6c00200063006f006e007400610069006e00730020006d006f0072006500
2000680075006d0061006e00690073007400200063006800610072006100
630074006500720069007300740069006300730020007400680061006e00
20006d0061006e00790020006f0066002000690074007300200070007200
65006400650063006500730073006f0072007300200061006e0064002000
610073002000730075006300680020006900730020006d006f0072006500
200069006e002000740075006e0065002000770069007400680020007400
6800650020006d006f006f00640020006f00660020007400680065002000
6c006100730074002000640065006300610064006500730020006f006600
200074006800650020007400770065006e00740069006500740068002000
630065006e0074007500720079002e002000200054006800650020006f00
76006500720061006c006c002000740072006500610074006d0065006e00
740020006f00660020006300750072007600650073002000690073002000
73006f006600740065007200200061006e0064002000660075006c006c00
6500720020007400680061006e00200069006e0020006d006f0073007400
200069006e0064007500730074007200690061006c002000730074007900
6c0065002000730061006e00730020007300650072006900660020006600
61006300650073002e00200020005400650072006d0069006e0061006c00
20007300740072006f006b00650073002000610072006500200063007500
740020006f006e002000740068006500200064006900610067006f006e00
61006c002000770068006900630068002000680065006c00700073002000
74006f002000670069007600650020007400680065002000660061006300
65002000610020006c0065007300730020006d0065006300680061006e00
6900630061006c00200061007000700065006100720061006e0063006500
2e002000200041007200690061006c00200069007300200061006e002000
650078007400720065006d0065006c007900200076006500720073006100
740069006c0065002000660061006d0069006c00790020006f0066002000
740079007000650066006100630065007300200077006800690063006800
2000630061006e0020006200650020007500730065006400200077006900
74006800200065007100750061006c002000730075006300630065007300
7300200066006f0072002000740065007800740020007300650074007400
69006e006700200069006e0020007200650070006f007200740073002c00
2000700072006500730065006e0074006100740069006f006e0073002c00
20006d006100670061007a0069006e006500730020006500740063002c00
200061006e006400200066006f007200200064006900730070006c006100
79002000750073006500200069006e0020006e0065007700730070006100
70006500720073002c002000610064007600650072007400690073006900
6e006700200061006e0064002000700072006f006d006f00740069006f00
6e0073002e0068007400740070003a002f002f007700770077002e006d00
6f006e006f0074007900700065002e0063006f006d002f00680074006d00
6c002f006d0074006e0061006d0065002f006d0073005f00610072006900
61006c002e00680074006d006c0068007400740070003a002f002f007700
770077002e006d006f006e006f0074007900700065002e0063006f006d00
2f00680074006d006c002f006d0074006e0061006d0065002f006d007300
5f00770065006c0063006f006d0065002e00680074006d006c004e004f00
540049004600490043004100540049004f004e0020004f00460020004c00
4900430045004e00530045002000410047005200450045004d0045004e00
54000d000a000d000a005400680069007300200074007900700065006600
61006300650020006900730020007400680065002000700072006f007000
650072007400790020006f00660020004d006f006e006f00740079007000
650020005400790070006f00670072006100700068007900200061006e00
640020006900740073002000750073006500200062007900200079006f00
7500200069007300200063006f0076006500720065006400200075006e00
640065007200200074006800650020007400650072006d00730020006f00
66002000610020006c006900630065006e00730065002000610067007200
650065006d0065006e0074002e00200059006f0075002000680061007600
650020006f0062007400610069006e006500640020007400680069007300
200074007900700065006600610063006500200073006f00660074007700
610072006500200065006900740068006500720020006400690072006500
630074006c0079002000660072006f006d0020004d006f006e006f007400
79007000650020006f007200200074006f00670065007400680065007200
20007700690074006800200073006f006600740077006100720065002000
640069007300740072006900620075007400650064002000620079002000
6f006e00650020006f00660020004d006f006e006f007400790070006500
2700730020006c006900630065006e0073006500650073002e000d000a00
0d000a005400680069007300200073006f00660074007700610072006500
200069007300200061002000760061006c007500610062006c0065002000
6100730073006500740020006f00660020004d006f006e006f0074007900
700065002e00200055006e006c00650073007300200079006f0075002000
6800610076006500200065006e0074006500720065006400200069006e00
74006f002000610020007300700065006300690066006900630020006c00
6900630065006e00730065002000610067007200650065006d0065006e00
740020006700720061006e00740069006e006700200079006f0075002000
6100640064006900740069006f006e0061006c0020007200690067006800
740073002c00200079006f0075007200200075007300650020006f006600
20007400680069007300200073006f006600740077006100720065002000
6900730020006c0069006d006900740065006400200074006f0020007900
6f0075007200200077006f0072006b00730074006100740069006f006e00
200066006f007200200079006f007500720020006f0077006e0020007000
750062006c0069007300680069006e00670020007500730065002e002000
59006f00750020006d006100790020006e006f007400200063006f007000
790020006f00720020006400690073007400720069006200750074006500
20007400680069007300200073006f006600740077006100720065002e00
0d000a000d000a0049006600200079006f00750020006800610076006500
200061006e00790020007100750065007300740069006f006e0020006300
6f006e006300650072006e0069006e006700200079006f00750072002000
720069006700680074007300200079006f0075002000730068006f007500
6c0064002000720065007600690065007700200074006800650020006c00
6900630065006e00730065002000610067007200650065006d0065006e00
7400200079006f0075002000720065006300650069007600650064002000
77006900740068002000740068006500200073006f006600740077006100
7200650020006f007200200063006f006e00740061006300740020004d00
6f006e006f007400790070006500200066006f0072002000610020006300
6f007000790020006f006600200074006800650020006c00690063006500
6e00730065002000610067007200650065006d0065006e0074002e000d00
0a000d000a004d006f006e006f0074007900700065002000630061006e00
200062006500200063006f006e0074006100630074006500640020006100
74003a000d000a000d000a0055005300410020002d002000280038003400
3700290020003700310038002d0030003400300030000900090055004b00
20002d002000300031003100340034002000300031003700330037002000
3700360035003900350039000d000a0068007400740070003a002f002f00
7700770077002e006d006f006e006f0074007900700065002e0063006f00
6d0068007400740070003a002f002f007700770077002e006d006f006e00
6f0074007900700065002e0063006f006d002f00680074006d006c002f00
74007900700065002f006c006900630065006e00730065002e0068007400
6d006c004e006f0072006d0061006c004e006f0072006d00610061006c00
69004e006f0072006d0061006c004e006f0072006d00e1006c004e006f00
72006d0061006c0065005300740061006e00640061006100720064004e00
6f0072006d0061006c004e006f0072006d0061006c006e0079004e006f00
72006d0061006c041e0431044b0447043d044b0439004e006f0072006d00
e1006c006e0065004e006f0072006d0061006c004e006f0072006d006100
6c004e0061007600610064006e006f0074006801b001a10300006e006700
4e006f0072006d0061006c004e006f0072006d0061006c004e006f007200
6d0061006c004e006f0072006d0061006c0000004123000f031700ef0317
00ff03170003001f0317002f0317004f0317005f0317008f0317009f0317
0006000f0317005f0317006f0317007f031700bf031700f0031700060040
0317b2923340b80317b28b3340b80317b36a6c3240b80317b2613340b803
17b35c5d3240b80317b357593240b80317b34d513240b80317b344493240
b80317b23a3340b80317b331343240b80317b32e423240b80317b3272c32
40b80317b312253280b80317b30a0d32c04116031600d003160002007003
16000102c4000f0101001f00a0031500b0031500020306000f0101001f00
400312b32426329fbf03040001030203010064001fffc00301b20d113241
0a02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f414a02e2
00af02e200bf02e2000302e202e202e102e1007f02e00001000f02e0003f
02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df02de
02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd
000702dd02dd001002dc0001000002dc0001001002dc003f02dc000202dc
02dc001002db000102db02db000f02da000102da02daffc002d3b2373932
b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc0
02d3b2121632b802d2b2f9291fb802e3b3202b1fa0413002d400b002d400
02000002d4001002d4002002d4005002d4006002d4007002d40006006002
d6007002d6008002d6009002d600a002d600b002d60006000002d6001002
d6002002ca002002cc002002d6003002d6004002d6005002d6000802d0b2
202b1fb802cfb226421f411602ce02c70017001f02cd02c80017001f02cc
02c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f00
410b02c6000002c7001002c6001002c7002f02c5000502c1b324121fff41
1102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf00
0602bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a600
a20800406a1f4026434932402043493240263a3d3240203a3d329f209f26
024026969932402096993240268e923240208e92324026848c324020848c
3240267a813240207a813240266c763240206c76324026646a324020646a
3240265a5f3240205a5f3240264f543240204f5432b8029eb724271f374f
6b0120410f0277003002770040027700500277000402770277027700f904
00001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a20180
6501807e01808101803c01805e01802b01801c01801e0180400180bb0138
000100800140b40180400180bb013800010080013940180180ca0180ad01
8073018026018025018024018020013740b80221b2493340b80221b24533
40b80221b341423240b80221b33d3e320f410f0221003f0221007f022100
0300bf022100cf022100ff0221000300400221b320223240b80221b3191e
3240b80222b32a3f3240b80221b32e3a326f414802c3007f02c3008f02c3
00df02c30004002f02c3006002c300cf02c30003000f02c3003f02c3005f
02c300c002c300ef02c300ff02c3000600df02220001008f02220001000f
0222002f0222003f0222005f0222007f022200ef0222000600bf022100ef
02210002006f0221007f022100af02210003002f0221003f0221004f0221
000302c302c30222022202210221401d101c102b1048038f1c010f1e014f
1eff1e023700161600000012110811b8010db6f70df8f70d00094109028e
028f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f411501
97001e0401001f013900260125001f013800730401001f0135001c080100
1f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e0401b6
1ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802abb61f
d41c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c381fad
cab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b2
1f6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c621f4073
b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb8
0401b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168402c07
960758074f07360732072c0721071f071d071b071408120810080e080c08
0a080808060804080208000814b8ffe0402b000001001406100000010006
04000001000410000001001002000001000200000001000002010802004a
00b013034b024b5342014bb0c063004b6220b0f65323b8010a515ab00523
4201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b101018e
59b0382bb00288b801005458b801ffb101018e851bb0124358b900010111
858d1bb900010128858d5959001816763f183f123e113946443e11394644
3e113946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b
2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b
5358b0ff1d594bb09353205c58b901f201f04544b901f101f045445958b9
033e01f2455258b901f2033e4459594bb8015653205c58b9002001f14544
b9002601f145445958b9081e0020455258b90020081e4459594bb8019a53
205c58b9002501f24544b9002401f245445958b909090025455258b90025
09094459594bb8040153205c58b173244544b1242445445958b917200073
455258b9007317204459594bb8040153205c58b1ca254544b12525454459
58b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544b1
1e1c45445958b9011a001c455258b9001c011a4459594bb05653205c58b1
1c1c4544b12f1c45445958b90189001c455258b9001c01894459594bb803
0153205c58b11c1c4544b11c1c45445958b90de0001c455258b9001c0de0
4459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c456523456023
456560234560b08b766818b080622020b163594565234520b00326606263
6820b003266165b059236544b063234420b13b5c4565234520b003266062
636820b003266165b05c236544b03b2344b1005c455458b15c406544b23b
403b4523614459b347503437456523456023456560234560b089766818b0
80622020b134504565234520b003266062636820b003266165b050236544
b034234420b147374565234520b003266062636820b003266165b0372365
44b0472344b10037455458b137406544b24740474523614459004b534201
4b5058b108004259435c58b108004259b3020b0a124358601b2159421610
703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0
124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0124358
b9187e3b211bba01a80400000b2b59b0102342b0112342002b7475737500
184569444569444569447373737374757374752b2b2b2b74752b2b2b2b2b
737373737373737373737373737373737373737373737373732b2b2b45b0
406144737400004bb02a534bb03f515a58b1070745b040604459004bb03a
534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b103
0345b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b90080
02bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba00
9f02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b00
2b2b2b2b2b2b004569447345694473456944737475456944734569444569
444569447374456944456944732b2b2b2b2b732b002b732b74752b2b2b2b
2b2b2b2b2b2b2b2b2b2b73747500000000>
[1039 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>WKFBAA+ArialMT AddT42Char 
WKFBAA+ArialMT /CharStrings get begin
end
end
%ADOEndSubsetFont
[/N9/WKFBAA+ArialMT -1 TZ
290.6 293.3 m
%ADOBeginSubsetFont: WKFBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+ArialMT gcheck setglobal} if
1 108 1 <0002fffd0000055905ba0007000e011e40632f1030106708680960108803
9010c905c606c010f0100b0805590156025010680bb010f30cf30df30e09
040c040d040e030b0a090504040c0d0e080607070c09050408060c070100
0020070c1407070c02030320040c1404040c091e0505081e060306b80270
400900080ce94002010202ba010b0001010b40120c2000650703525004cf
04df040390040104b80101400b500cc007df0c03900c010cb8010140100f
07cf07027f0780070207930fd6d7182b10f45d7119f45d71f45d7118ed10
ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b7d10c4872e18
2b7d10c401111239391139398710c4c40ec4c4870510c4c40ec4c4313001
4bb00b534bb01e515a58b4040f030807bafff00000fff838383838590172
715d230133012303210313210326270607030233d10258ddabfd9ba1d901
f19946221c3305bafa4601bcfe44025a0196b9778d8b>WKFBAA+ArialMT AddT42Char 
WKFBAA+ArialMT /CharStrings get begin
/g1 1 def
end
WKFBAA+ArialMT /Encoding get
dup 1 /g1 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N9 32.0 Tf
(\001) show
Q
q
[/DeviceRGB] cs 0.0 0.0 0.0 sc
163.0 137.6 m
%ADOBeginSubsetFont: WKFBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+ArialMT gcheck setglobal} if
1 460 2 <000100610000059b05d3001d00d5405b9f119f1b02580159045805570d5b
145415581758187a12751a86180b5c0550096f05640976090525094b124b
144618451a050b0504091d0514092a05050c1502173b1a03161e07030e0d
00012d1b1b112d0d1e0f101d1c1c10080db8023ab310101101b8023ab71b
1c2f114f110211b8027840150e13260b4a0f1013010e6a5f1f011f201c40
1c021cb8027840101d1926034a601d01001d201d021dac1e10f65d71f4ed
10ed5d105df65d3cf4ed10ed5d103ced103c10ed003f3c103c103cfdf43c
10f43c103c3fed313001715d5d5d5d005d37212411341224333204121510
0521152135241134022322021510051521610140fed0a00124cdcb010faf
fed00140fdc60164fbc9cff80162fdc5adfe016ec7013cb7a8fec6d8fe92
feada2a601b3f5013dfec1e9fe47aaa2>WKFBAA+ArialMT AddT42Char 
WKFBAA+ArialMT /CharStrings get begin
/g2 2 def
end
WKFBAA+ArialMT /Encoding get
dup 2 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N9 32.0 Tf
(\002) show
Q
q
[/DeviceRGB] cs 0.0 0.0 0.0 sc
517.3 293.3 m
%ADOBeginSubsetFont: WKFBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal WKFBAA+ArialMT gcheck setglobal} if
1 776 3 <00030096000004e905ba0011001d002a0081405004044623562366237309
840906691a75057009730b8305830b062716090318272a1e161d09091312
1e2a2a2929001c1d1e0201021f1e1e1100081826065425260c1a2c1d1e20
01200001005d2b3b5c182b10f65d3cfd3c4e10f64dedf4ed003f3cfd3c3f
3cfd3c12392f3c10fd3c392f1139111239011217393130015d005d331121
32161615140607161615140e022301213237363635342626232111213237
3e02353426262321960226a8cb736667858f5780c18cfe93013d81384a4b
46829efedb016d5e26435a3a54958cfead05ba59b9655ea63327bc8067b1
603103521116664d496f29fba0070c386b4652793100>WKFBAA+ArialMT AddT42Char 
WKFBAA+ArialMT /CharStrings get begin
/g3 3 def
end
WKFBAA+ArialMT /Encoding get
dup 3 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/N9 32.0 Tf
(\003) show
Q
q
2.83 w
1 j
n
411.0 396.6 m
531.5 396.6 623.6 350.5 623.6 290.3 c
623.6 230.0 531.5 184.0 411.0 184.0 c
290.5 184.0 198.4 230.0 198.4 290.3 c
198.4 350.5 290.5 396.6 411.0 396.6 c
h
[/DeviceRGB] cs 0.0 0.0 0.0 sc
S
Q
q
2.83 w
1 j
n
331.3 361.2 m
391.6 361.2 437.6 336.7 437.6 304.6 c
437.6 272.4 391.6 247.9 331.3 247.9 c
271.1 247.9 225.0 272.4 225.0 304.6 c
225.0 336.7 271.1 361.2 331.3 361.2 c
h
[/DeviceRGB] cs 0.0 0.0 0.0 sc
S
Q
Q
Q
/WKFBAA+ArialMT /Font _pdfUndefineResource
/N9 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
